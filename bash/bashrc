#!/bin/bash

umask 022

export LANG=ja_JP.UTF-8
export LANGUAGE=ja

__add_front_mypath () {
  export PATH="$(
    declare -A paths
    echo -n "${1}";
    #echo "${1}";
    paths["${1}"]=1
    echo "${PATH}:" | while IFS= read -d ':' -r p; do
      if [[ -v paths["${p}"] ]]; then
        continue;
      fi;
      echo -n ":${p}";
      #echo ":${p}";
      paths["${p}"]=1
      #declare -p paths
    done;
  )"
}

export PATH=$HOME/usr/bin:$HOME/usr/local/bin:$PATH
export MANPATH=$HOME/usr/share/man:$MANPATH

# debian_chroot chroot 使用中かを示す
# \u ユーザ名
# \h ホスト名(最初のドットまで)
# \n 改行
# \r 復帰
# \w カレントディレクトリ
# \j ジョブ数
# \t HH:MM:SS 24時間制の時間
# /D{format} formatがstrftimeに渡された結果の文字列
# \$ uidが0の場合#, それ以外は$
# \[ ... \] シーケンスの開始から終了
# \[\e[..\] 装飾開始 \[\e[0m\] 装飾終了
# カラーシーケンスについて
## 16色カラー
## \033[属性;前景色;背景色m
## 256食カラー
## 前景色 \033[38;5;色番号m
## 背景色 \033[48;5;色番号m
## カラーシーケンス一覧
## for ((i = 0; i < 16; i++)); do for ((j = 0; j < 16; j++)); do for ((k = 0; k < 16; k++)); do for ((l = 0; l < 16; l++)); do hex=$(($i*16 + $j)); hex2=$(($k*16 + $l)); printf '\e[38;5;%dm\e[48;5;%dm%03d-%03d\e[m ' $hex $hex2 $hex $hex2; done; echo ""; done; done; done
## 24bitカラー
## 前景色 \033[38;2;赤;緑;青m
## 背景色 \033[48;2;赤;緑;青m
# その他エスケープシーケンス
## \E7 保存
## \E8 復帰
# 以下の形式のプロンプト
# debian_chroot、日付、pushdディレクトリ群、バックグラウンドジョブ数
# ユーザ名@ホスト名:PWD
# $ 
__prompt_decorate_end='\[\e[00m\]'
PS1='\[\e]0;\u@\h: \w\a\]\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}'
#PS1+='\[\e[48;5;17m\]\[\e7\]$(printf "%*s" ${COLUMNS:-40} " ")\[\e8\]'
PS1+='\[\e[48;5;17m\]\r$(printf "%*s" ${COLUMNS:-40} " ")\r'
PS1+='\[\e[38;5;245m\]\D{%y-%m-%d %H:%M:%S} '
__prompt_dirs='$(dirs -v | grep -q "^[[:blank:]]*1" || exit; echo -n "["; dirs -l -v | tail -n +2 | head -n 4 | sed '\''s/^[[:blank:]]*\([[:digit:]]\+\)[[:blank:]]*\(.*\)/<\1: \2>/g'\'' | tr "\n''" " "; echo -n "] ")'
PS1+='\[\e[38;5;66m\]'$__prompt_dirs
PS1+='\[\e[38;5;130m\]J:\j'
PS1+=$__prompt_decorate_end'\n'
__prompt_userhost_color='\[\e[48;5;29m\]\[\e[38;5;213m\]'
PS1+=$__prompt_userhost_color'\u@\h'$__prompt_decorate_end':'
__prompt_cwd_color='\[\e[01\]\[\e[48;5;124m\]\[\e[38;5;47m\]'
PS1+=${__prompt_cwd_color}'[\w]'${__prompt_decorate_end}
PS1+='\n\$ '

if which vim > /dev/null 2>&1 ; then
  export EDITOR=vim
else
  export EDITOR=vi
fi

#if [[ -v WSL_DISTRO_NAME ]]; then
if uname --kernel-release | grep -q -e "WSL" &> /dev/null && [[ ! -v DISPLAY ]]; then
  export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}'):0
fi

# 標準入力端末時にctrl-sによる出力ロックを無効化
if [[ -t 0 ]]; then
  stty stop undef
fi

export HISTCONTROL=ignoreboth
export HISTSIZE=65535
export HISTFILESIZE=65535
export HISTIGNORE="history:history *:p[0-9n]:jobs:fg:share_history:share_history :#*"

function share_history_nosync {
  history -a &&
  tac ~/.bash_history |
  sed 's/[[:blank:]]\+$//g' |
  awk '!a[$0]++' |
  tac > ~/.bash_history.tmp &&
  [ -f ~/.bash_history.tmp ] &&
  mv ~/.bash_history{.tmp,} &&
  history -c &&
  history -r
}

function share_history_async {
  local _lock=-1;
  local _locked=0;
  exec {_lock}>~/.bash_history.lock &&
  flock --nonblock --exclusive ${_lock} &&
  _locked=1 &&
  history -a &&
  tac ~/.bash_history |
  sed 's/[[:blank:]]\+$//g' |
  awk '!a[$0]++' |
  tac > ~/.bash_history.tmp &&
  [ -f ~/.bash_history.tmp ] &&
  mv ~/.bash_history{.tmp,} &&
  history -c &&
  history -r
  [[ ${_locked} -ne 0 ]] && flock --unlock ${_lock}
  [[ ${_lock} -ne -1 ]] && exec {_lock}>&-
}

# 履歴重複削除
if [[ -x flock ]]; then

  function share_history {
#    share_history_async
    share_history_nosync
  }

else

  function share_history {
    share_history_nosync
  }

fi

if [[ -e $(dirname "${BASH_SOURCE}")/switches/enable/share-history ]]; then
  PROMPT_COMMAND='share_history'
  shopt -u histappend
fi

#

if [[ ! "${PWD}" = "${HOME}" ]]; then
  pushd -n "${HOME}" &> /dev/null
fi

#

# fcitxを自動的にONにする設定(2022-01-25 コメントアウト)

# aliase

#export DISPLAY=localhost:0.0

#export PATH=$HOME/usr/bin:$HOME/usr/local/bin:$HOME/usr/local/pycharm-community-2018.2.2/bin:$PATH

#export GTK_IM_MODULE=fcitx
#export QT_IM_MODULE=fcitx
#export XMODIFIERS=@im=fcitx
#export DefaultIMModule=fcitx
## fcitx-autostart
#if xset -q > /dev/null 2>&1; then
# xset -r 49
#fi




#

source $(dirname "${BASH_SOURCE}")/aliasrc.sh 
source $(dirname "${BASH_SOURCE}")/utils.sh

if [[ -e $(dirname "${BASH_SOURCE}")/switches/enable/tmux ]] &&
   which tmux &> /dev/null &&
   [[ ! -v TMUX ]] &&
   ! tmux has -t main &> /dev/null; then
  tmux new -A -s main \; detach &> /dev/null
fi

